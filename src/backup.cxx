// Copyright 2018 Patrick Flynn
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//	this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this
//	list of conditions and the following disclaimer in the documentation and/or
//	other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may
//	be used to endorse or promote products derived from this software
//	without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#include <QDir>
#include <QFile>
#include <QTextStream>

#include "backup.hh"
#include "settings.hh"

QString Backup::filePath;

void Backup::init() {
#ifdef _WIN32
    filePath = QDir::homePath()+"\\AppData\\Local\\EasyBackup\\";
#else
    filePath = QDir::homePath()+"/.local/share/easybackup/";
#endif
    if (!QDir(filePath).exists()) {
        QDir().mkpath(filePath);
    }
    filePath+="dirlist";
}

QStringList Backup::backupList() {
    QStringList list;
    QFile file(filePath);
    if (file.open(QFile::ReadWrite)) {
        QTextStream reader(&file);
        while (!reader.atEnd()) {
            QString line = reader.readLine();
            if (!line.isEmpty()) {
                list.push_back(line);
            }
        }
        file.close();
    }
    return list;
}

void Backup::setBackupList(QStringList list) {
    QFile file(filePath);
    if (file.open(QFile::ReadWrite | QFile::Truncate)) {
        QTextStream writer(&file);
        for (int i = 0; i<list.size(); i++) {
#ifdef _WIN32
            writer << list.at(i)+"\r\n";
#else
            writer << list.at(i)+"\n";
#endif
        }
        writer.flush();
        file.close();
    }
}

#ifdef _WIN32
void Backup::genScript() {
    QString content = "@echo off\r\n";
    content+="::Generated by EasyBackup\r\n";
    content+="set backup=\""+Settings::dest()+"\"\r\n";

    QString command = Settings::command();
    QString args = Settings::args();

    QStringList items = backupList();
    for (int i = 0; i<items.size(); i++) {
        QString line = items.at(i);
        QString dirName = QDir(line).dirName();

        content+="if not exist \"%backup%\\"+dirName+"\" md \"%backup%\\"+dirName+"\"\r\n";
        content+=command+" \""+line+"\" \"%backup%\\"+dirName+"\" "+args+"\r\n";
    }

    QString parent = QFileInfo(filePath).absolutePath();
    parent+="\\backup.bat";
    QFile file(parent);
    if (file.open(QFile::ReadWrite | QFile::Truncate)) {
        QTextStream writer(&file);
        writer << content;
        writer.flush();
        file.close();
    }
}
#else
void Backup::genScript() {
    QString content = "#!/bin/bash\n";
    content+="#Generated by easybackup.\n";

    QString dest = Settings::dest();
    content+="if [ ! -d "+dest+" ]; then\nmkdir -p \""+dest+"\"\nfi\n";

    QString command = Settings::command()+" "+Settings::args();
    QStringList items = backupList();

    for (int i = 0; i<items.size(); i++) {
        QString line = command;
        QString path2 = items.at(i);
        line+=" \""+path2+"\" \""+dest+"\"\n";
        content+=line;
    }

    QFile file("/tmp/backup.sh");
    if (file.open(QFile::ReadWrite | QFile::Truncate)) {
        QTextStream writer(&file);
        writer << content;
        writer.flush();
        file.close();
    }
}
#endif
